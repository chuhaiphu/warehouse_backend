package capstonesu25.warehouse.annotation.generateId.listener;

import capstonesu25.warehouse.annotation.generateId.AutoGeneratedId;
import capstonesu25.warehouse.entity.Item;
import jakarta.persistence.PrePersist;

import java.lang.reflect.Field;
import java.util.Random;

public class AutoGeneratedIdListener {
    @PrePersist
    public void generateId(Object entity) {
        try {
            for (Field field : entity.getClass().getDeclaredFields()) {
                if (field.isAnnotationPresent(AutoGeneratedId.class)) {
                    field.setAccessible(true);

                    if (field.get(entity) != null) {
                        return;
                    }

                    AutoGeneratedId annotation = field.getAnnotation(AutoGeneratedId.class);
                    String parentFieldName = annotation.parentField();

                    Field parentField = entity.getClass().getDeclaredField(parentFieldName);
                    parentField.setAccessible(true);
                    Object parent = parentField.get(entity);

                    if (parent == null) {
                        throw new IllegalStateException("Parent entity must not be null for ID generation.");
                    }

                    Field parentIdField = parent.getClass().getDeclaredField("id");
                    parentIdField.setAccessible(true);
                    Object parentId = parentIdField.get(parent);

                    if (parentId == null) {
                        throw new IllegalStateException("Parent ID must not be null for ID generation.");
                    }

                    String randomDigits = String.format("%05d", new Random().nextInt(100000));

                    String generatedId = parentId + "_" + randomDigits;
                    field.set(entity, generatedId);
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("Error generating ID: " + e.getMessage(), e);
        }
    }
}
